drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
create table t1 (a int)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
select count(a) as b from t1 where a=0 having b > 0;
b
insert into t1 values (null);
select count(a) as b from t1 where a=0 having b > 0;
b
select count(a) as b from t1 where a=0 having b >=0;
b
0
analyze table t1;
Catalog_Name	DB_Name	Table_Name	Columns	Job_Id
internal	default_cluster:test	t1	[a]	161590
explain select count(a) as b from t1 where a=0 having b >=0;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
     count(`a`)
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`a`

  VRESULT SINK

  1:VAGGREGATE (update finalize)
  |  output: count(`a`)
  |  group by: 
  |  having:  count(`a`) >= 0
  |  cardinality=0
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `a` = 0
     partitions=1/1, tablets=1/1, tabletList=161587
     cardinality=0, avgRowSize=4.0, numNodes=1
drop table t1;
CREATE TABLE t1 (
raw_id int(10) NOT NULL default '0',
chr_start int(10) NOT NULL default '0',
chr_end int(10) NOT NULL default '0',
raw_start int(10) NOT NULL default '0',
raw_end int(10) NOT NULL default '0',
raw_ori int(2) NOT NULL default '0'
)
DISTRIBUTED BY HASH(raw_id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (469713,1,164123,1,164123,1),(317330,164124,317193,101,153170,1),(469434,317194,375620,101,58527,1),(591816,375621,484273,1,108653,1),(591807,484274,534671,91,50488,1),(318885,534672,649362,101,114791,1),(318728,649363,775520,102,126259,1),(336829,775521,813997,101,38577,1),(317740,813998,953227,101,139330,1),(1,813998,953227,101,139330,1);
CREATE TABLE t2 (
id BIGINT NOT NULL default '0',
contig_id BIGINT NOT NULL default '0',
seq_start int(10) NOT NULL default '0',
seq_end int(10) NOT NULL default '0',
strand tinyint(2) NOT NULL default '0'
)
UNIQUE KEY(id)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t2 VALUES (133195,469713,61327,61384,1),(133196,469713,64113,64387,1),(133197,1,1,1,0),(133197,1,1,1,-2);
SELECT e.id,
MIN( IF(sgp.raw_ori=1,
(e.seq_start+sgp.chr_start-sgp.raw_start),  
(sgp.chr_start+sgp.raw_end-e.seq_end))) as start, 
MAX( IF(sgp.raw_ori=1,
(e.seq_end+sgp.chr_start-sgp.raw_start),  
(sgp.chr_start+sgp.raw_end-e.seq_start))) as end, 
AVG(IF (sgp.raw_ori=1,e.strand,(-e.strand))) as chr_strand 
FROM  t1 sgp,
t2 e  
WHERE sgp.raw_id=e.contig_id 
GROUP BY e.id 
HAVING chr_strand= -1 and end >= 0 
AND start <= 999660;
id	start	end	chr_strand
drop table t1;
drop table t2;
CREATE TABLE t1 (Fld1 int(11) default NULL,Fld2 int(11) default NULL)
DISTRIBUTED BY HASH(Fld1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1,10),(1,20),(2,NULL),(2,NULL),(3,50);
select Fld1, max(Fld2) as q from t1 group by Fld1 having q is not null;
Fld1	q
1	20
3	50
select Fld1, max(Fld2) from t1 group by Fld1 having max(Fld2) is not null;
Fld1	max(`Fld2`)
1	20
3	50
select Fld1, max(Fld2) from t1 group by Fld1 having avg(Fld2) is not null;
Fld1	max(`Fld2`)
1	20
3	50
select Fld1, max(Fld2) from t1 group by Fld1 having variance(Fld2) is not null;
Fld1	max(`Fld2`)
1	20
3	50
drop table t1;
create table t1 (id int not null, qty int not null)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
insert into t1 values (1,2),(1,3),(2,4),(2,5);
select id, sum(qty) as sqty from t1 group by id having sqty>2;
id	sqty
1	5
2	9
select sum(qty) as sqty from t1 group by id having count(id) > 0;
sqty
5
9
select sum(qty) as sqty from t1 group by id having count(distinct id) > 0;
sqty
5
9
drop table t1;
CREATE TABLE t1 (
`id` bigint(20) NOT NULL default '0',
`description` text
)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
CREATE TABLE t2 (
`id` bigint(20) NOT NULL default '0',
`description` varchar(20)
)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1  VALUES (1, 'test');
INSERT INTO t2 VALUES (1, 'test');
CREATE TABLE t3 (
`id`       bigint(20) NOT NULL default '0',
`order_id` bigint(20) NOT NULL default '0'
)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
select
a.id, a.description,
count(b.id) as c 
from t1 a left join t3 b on a.id=b.order_id 
group by a.id, a.description 
having (a.description is not null) and (c=0);
id	description	c
1	test	0
INSERT INTO t1  VALUES (2, 'test2');
select
a.id, a.description,
count(b.id) as c 
from t1 a left join t3 b on a.id=b.order_id 
group by a.id, a.description 
having (a.description is not null) and (c=0);
id	description	c
1	test	0
2	test2	0
drop table t1;
drop table t2;
drop table t3;
CREATE TABLE t1 (a int)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (3), (4), (1), (3), (1);
SELECT SUM(a) FROM t1 GROUP BY a HAVING SUM(a)>0;
sum(`a`)
2
4
6
DROP TABLE t1;
CREATE TABLE t1 (a int)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1), (2), (1), (3), (2), (1);
SELECT a FROM t1 GROUP BY a HAVING a > 1;
a
2
3
SELECT a FROM t1 GROUP BY a HAVING 1 != 1 AND a > 1;
a
SELECT 0 AS x, a FROM t1 GROUP BY x,a HAVING x=1 AND a > 1;
x	a
analyze table t1;
Catalog_Name	DB_Name	Table_Name	Columns	Job_Id
internal	default_cluster:test	t1	[a]	161648
EXPLAIN SELECT a FROM t1 GROUP BY a HAVING 1 != 1 AND a > 1;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
     `a`
  PARTITION: UNPARTITIONED

  VRESULT SINK

  2:VEMPTYSET
EXPLAIN SELECT 0 AS x, a FROM t1 GROUP BY x,a HAVING x=1 AND a > 1;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    0
     `a`
  PARTITION: UNPARTITIONED

  VRESULT SINK

  2:VEMPTYSET
DROP table t1;
CREATE TABLE t1 (a int)
UNIQUE KEY(a)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
CREATE TABLE t2 (b int, a int)
UNIQUE KEY(b)
DISTRIBUTED BY HASH(b) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
CREATE TABLE t3 (b int, flag int)
DISTRIBUTED BY HASH(b) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1,1), (2,1), (3,1);
INSERT INTO t3(b,flag) VALUES (2, 1);
SELECT t1.a
FROM t1 INNER JOIN t2 ON t1.a=t2.a LEFT JOIN t3 ON t2.b=t3.b
GROUP BY t1.a, t2.b HAVING MAX(t3.flag)=0;
a
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
create table t1 (col1 int, col2 varchar(5), col_t1 int)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
create table t2 (col1 int, col2 varchar(5), col_t2 int)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
create table t3 (col1 int, col2 varchar(5), col_t3 int)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
insert into t1 values(10,'hello',10);
insert into t1 values(20,'hello',20);
insert into t1 values(30,'hello',30);
insert into t1 values(10,'bye',10);
insert into t1 values(10,'sam',10);
insert into t1 values(10,'bob',10);
insert into t2 select * from t1;
insert into t3 select * from t1;
select count(*) from t1 group by col1 having col1 = 10;
count(*)
4
select count(*) as count_col1 from t1 group by col1 having col1 = 10;
count_col1
4
select count(*) as count_col1 from t1 as tmp1 group by col1 having col1 = 10;
count_col1
4
select count(*) from t1 group by col2 having col2 = 'hello';
count(*)
3
select col1 as count_col1 from t1 as tmp1 group by col1 having col1 = 10;
count_col1
10
select col1 as count_col1 from t1 as tmp1 group by col1 having count_col1 = 10;
count_col1
10
select col1 as count_col1 from t1 as tmp1 group by count_col1 having col1 = 10;
count_col1
10
select col1 as count_col1 from t1 as tmp1 group by count_col1 having count_col1 = 10;
count_col1
10
select col1 as count_col1,col2 from t1 as tmp1 group by col1,col2 having col1 = 10;
count_col1	col2
10	bob
10	bye
10	hello
10	sam
select col1 as count_col1,col2 from t1 as tmp1 group by col1,col2 having count_col1 = 10;
count_col1	col2
10	bob
10	bye
10	hello
10	sam
select col1 as count_col1,col2 from t1 as tmp1 group by col1,col2 having col2 = 'hello';
count_col1	col2
10	hello
20	hello
30	hello
select col1 as count_col1,col2 as group_col2 from t1 as tmp1 group by col1,col2 having group_col2 = 'hello';
count_col1	group_col2
10	hello
20	hello
30	hello
select sum(col1) as co2, count(col2) as cc from t1 group by col1 having col1 =10;
co2	cc
40	4
select t1.col1 from t1
where t1.col2 in 
(select t2.col2 from t2 
group by t2.col1, t2.col2 having t2.col1 <= 10);
col1
10
20
30
10
10
10
select col_t1, sum(col1) from t1
group by col_t1
having col_t1 > 10 and
exists (select sum(t2.col1) from t2
group by t2.col2 having t2.col2 > 'b');
col_t1	sum(`col1`)
20	20
30	30
drop table t1;
drop table t2;
drop table t3;
create table t1 (s1 int)
DISTRIBUTED BY HASH(s1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
insert into t1 values (1),(2),(3);
select count(*) from t1 group by s1 having s1 is null;
count(*)
select s1*0 as s1 from t1 group by s1 having s1 <> 0;
s1
0
0
0
select s1*0 from t1 group by s1 having s1 = 0;
`s1` * 0
select s1 from t1 group by 1 having 1 = 0;
s1
select count(s1) from t1 group by s1 having count(1+1)=2;
count(`s1`)
select count(s1) from t1 group by s1 having s1*0=0;
count(`s1`)
1
1
1
select * from t1 a, t1 b group by a.s1 having s1 is null;
ERROR 23000: errCode = 2, detailMessage = Column 's1' in field list is ambiguous
drop table t1;
DROP SCHEMA IF EXISTS HU;
CREATE SCHEMA HU ;
USE HU ;
CREATE TABLE STAFF
(EMPNUM   CHAR(3) NOT NULL,
EMPNAME  CHAR(20),
GRADE    DECIMAL(4),
CITY     CHAR(15))
UNIQUE KEY(EMPNUM)
DISTRIBUTED BY HASH(EMPNUM) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
  );
CREATE TABLE PROJ
(PNUM     CHAR(3) NOT NULL,
PNAME    CHAR(20),
PTYPE    CHAR(6),
BUDGET   DECIMAL(9),
CITY     CHAR(15))
UNIQUE KEY(PNUM)
DISTRIBUTED BY HASH(PNUM) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
    );
INSERT INTO STAFF VALUES ('E1','Alice',12,'Deale');
INSERT INTO STAFF VALUES ('E2','Betty',10,'Vienna');
INSERT INTO STAFF VALUES ('E3','Carmen',13,'Vienna');
INSERT INTO STAFF VALUES ('E4','Don',12,'Deale');
INSERT INTO STAFF VALUES ('E5','Ed',13,'Akron');
INSERT INTO PROJ VALUES  ('P1','MXSS','Design',10000,'Deale');
INSERT INTO PROJ VALUES  ('P2','CALM','Code',30000,'Vienna');
INSERT INTO PROJ VALUES  ('P3','SDP','Test',30000,'Tampa');
INSERT INTO PROJ VALUES  ('P4','SDP','Design',20000,'Deale');
INSERT INTO PROJ VALUES  ('P5','IRM','Test',10000,'Vienna');
INSERT INTO PROJ VALUES  ('P6','PAYR','Design',50000,'Deale');
DROP SCHEMA HU;
USE test;
create table t1(f1 int)
DISTRIBUTED BY HASH(f1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
select f1 from t1 group by f1 having max(f1)=f1;
f1
set session sql_mode='ONLY_FULL_GROUP_BY';
select f1 from t1 group by f1 having max(f1)=f1;
f1
set session sql_mode='';
drop table t1;
CREATE TABLE t1 ( a INT, b INT)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1, 1), (2,2), (3, NULL);
SELECT b, COUNT(DISTINCT a) FROM t1 GROUP BY b HAVING b is NULL;
b	count(DISTINCT `a`)
NULL	1
DROP TABLE t1;
#
# Bug#48916 Server incorrectly processing HAVING clauses with an ORDER BY clause
#
CREATE TABLE t1 (f1 INT, f2 INT, f3 INT)
UNIQUE KEY(f1)
DISTRIBUTED BY HASH(f1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (2,7,9), (4,7,9), (6,2,9), (17,0,9);
SELECT table1.f1, table2.f2
FROM t1 AS table1
JOIN t1 AS table2 ON table1.f3 = table2.f3
WHERE table2.f1 = 2
GROUP BY table1.f1, table2.f2
HAVING (table2.f2 = 8 AND table1.f1 >= 6);
f1	f2
EXPLAIN
SELECT table1.f1, table2.f2
FROM t1 AS table1
JOIN t1 AS table2 ON table1.f3 = table2.f3
WHERE table2.f1 = 2
GROUP BY table1.f1, table2.f2
HAVING (table2.f2 = 8 AND table1.f1 >= 6);
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    <slot 5> `table1`.`f1`
    <slot 6> `table2`.`f2`
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`f1`

  VRESULT SINK

  3:VAGGREGATE (update finalize)
  |  group by: <slot 10>, <slot 13>
  |  cardinality=-1
  |  
  2:VHASH JOIN
  |  join op: INNER JOIN(BROADCAST)[Inconsistent distribution of table and queries]
  |  equal join conjunct: `table1`.`f3` = `table2`.`f3`
  |  runtime filters: RF000[in_or_bloom] <- `table2`.`f3`(-1/0/2097152)
  |  cardinality=0
  |  vec output tuple id: 3
  |  vIntermediate tuple ids: 4 5 
  |  output slot ids: 10 13 
  |  hash output slot ids: 2 3 
  |  
  |----4:VEXCHANGE
  |       offset: 0
  |    
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `table1`.`f1` >= 6 AND `table1`.`__DORIS_DELETE_SIGN__` = 0
     runtime filters: RF000[in_or_bloom] -> `table1`.`f3`
     partitions=1/1, tablets=1/1, tabletList=161737
     cardinality=0, avgRowSize=9.0, numNodes=1

PLAN FRAGMENT 1

  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`f1`

  STREAM DATA SINK
    EXCHANGE ID: 04
    UNPARTITIONED

  1:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `table2`.`f1` = 2 AND `table2`.`f2` = 8 AND `table2`.`__DORIS_DELETE_SIGN__` = 0
     partitions=1/1, tablets=1/1, tabletList=161737
     cardinality=0, avgRowSize=13.0, numNodes=1
EXPLAIN
SELECT table1.f1, table2.f2
FROM t1 AS table1
JOIN t1 AS table2 ON table1.f3 = table2.f3
WHERE table2.f1 = 2
GROUP BY table1.f1, table2.f2
HAVING (table2.f2 = 8);
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    <slot 5> `table1`.`f1`
    <slot 6> `table2`.`f2`
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`f1`

  VRESULT SINK

  3:VAGGREGATE (update finalize)
  |  group by: <slot 10>, <slot 13>
  |  cardinality=-1
  |  
  2:VHASH JOIN
  |  join op: INNER JOIN(BROADCAST)[Inconsistent distribution of table and queries]
  |  equal join conjunct: `table1`.`f3` = `table2`.`f3`
  |  runtime filters: RF000[in_or_bloom] <- `table2`.`f3`(-1/0/2097152)
  |  cardinality=0
  |  vec output tuple id: 3
  |  vIntermediate tuple ids: 4 5 
  |  output slot ids: 10 13 
  |  hash output slot ids: 2 3 
  |  
  |----4:VEXCHANGE
  |       offset: 0
  |    
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `table1`.`__DORIS_DELETE_SIGN__` = 0
     runtime filters: RF000[in_or_bloom] -> `table1`.`f3`
     partitions=1/1, tablets=1/1, tabletList=161737
     cardinality=0, avgRowSize=9.0, numNodes=1

PLAN FRAGMENT 1

  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`f1`

  STREAM DATA SINK
    EXCHANGE ID: 04
    UNPARTITIONED

  1:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `table2`.`f1` = 2 AND (`table2`.`f2` = 8) AND `table2`.`__DORIS_DELETE_SIGN__` = 0
     partitions=1/1, tablets=1/1, tabletList=161737
     cardinality=0, avgRowSize=13.0, numNodes=1
DROP TABLE t1;
End of 5.0 tests
#
# Bug#54416 MAX from JOIN with HAVING returning NULL with 5.1 and Empty set
#
CREATE TABLE t1 (f1 INT(11), f2 VARCHAR(1))
UNIQUE KEY(f1)
DISTRIBUTED BY HASH(f1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1,'f');
CREATE TABLE t2 (f1 INT(11), f2 VARCHAR(1))
DISTRIBUTED BY HASH(f1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t2 VALUES (2,'m');
INSERT INTO t2 VALUES (3,'m');
INSERT INTO t2 VALUES (11,NULL);
INSERT INTO t2 VALUES (12,'k');
SELECT MAX(t1.f1) field1
FROM t1 JOIN t2 ON t2.f2 LIKE 'x'
HAVING field1 < 7;
field1
DROP TABLE t1;
DROP TABLE t2;
#
# Bug#11760517: MIN/MAX FAILS TO EVALUATE HAVING CONDITION, 
#               RETURNS INCORRECT NULL RESULT
#
CREATE TABLE t1 (pk INT, i4 INT)
UNIQUE KEY(pk)
DISTRIBUTED BY HASH(pk) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (2,7), (4,7), (6,2), (17,0);

SELECT MIN(table1.i4), MIN(table2.pk) as min_pk
FROM t1 as table1, t1 as table2
WHERE table1.pk = 1;
min(`table1`.`i4`)	min_pk
NULL	NULL

SELECT MIN(table1.i4), MIN(table2.pk) as min_pk
FROM t1 as table1, t1 as table2
WHERE table1.pk = 1
HAVING min_pk <= 10;
min(`table1`.`i4`)	min_pk

DROP TABLE t1;
# Bug#34923792: Mysqld assert - JOIN::add_having_as_tmp_table_cond
CREATE TABLE t1 (f1 INTEGER)
DISTRIBUTED BY HASH(f1) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
SELECT SUM(t1.f1)+1 AS field1
FROM t1 JOIN t1 AS t2
GROUP BY t1.f1
HAVING field1 < 7
ORDER BY field1;
field1
DROP TABLE t1;
