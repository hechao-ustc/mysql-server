drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
CREATE TABLE t1 (
spID BIGINT,
userID BIGINT,
score INT,
lsg char(40),
date date
)
DISTRIBUTED BY HASH(spID) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1,1,1,'','0000-00-00');
INSERT INTO t1 VALUES (2,2,2,'','0000-00-00');
INSERT INTO t1 VALUES (2,1,1,'','0000-00-00');
INSERT INTO t1 VALUES (3,3,3,'','0000-00-00');
CREATE TABLE t2 (
userID BIGINT NOT NULL,
niName char(15),
passwd char(8),
mail char(50),
isAukt char(8) DEFAULT 'N',
vName char(30),
nName char(40),
adr char(60),
plz char(5),
ort char(35),
land char(20)
)
UNIQUE KEY(userID)
DISTRIBUTED BY HASH(userID) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t2 VALUES (1,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (2,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (3,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (4,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (5,'name','pass','mail','Y','v','n','adr','1','1','1');
EXPLAIN SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID GROUP BY t2.userid;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    <slot 3> `t2`.`userid`
    <slot 4> min(<slot 6>)
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  VRESULT SINK

  3:VAGGREGATE (update finalize)
  |  output: min(<slot 6>)
  |  group by: <slot 8>
  |  cardinality=-1
  |  
  2:VHASH JOIN
  |  join op: INNER JOIN(BROADCAST)[Tables are not in the same group]
  |  equal join conjunct: `t1`.`userID` = `t2`.`userID`
  |  runtime filters: RF000[in_or_bloom] <- `t2`.`userID`
  |  cardinality=0
  |  vec output tuple id: 3
  |  vIntermediate tuple ids: 4 5 
  |  output slot ids: 6 8 
  |  hash output slot ids: 0 1 
  |  
  |----4:VEXCHANGE
  |       offset: 0
  |    
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     runtime filters: RF000[in_or_bloom] -> `t1`.`userID`
     partitions=1/1, tablets=1/1, tabletList=25363
     cardinality=0, avgRowSize=12.0, numNodes=1

PLAN FRAGMENT 1

  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t2`.`userID`

  STREAM DATA SINK
    EXCHANGE ID: 04
    UNPARTITIONED

  1:VOlapScanNode
     TABLE: default_cluster:test.t2(t2), PREAGGREGATION: OFF. Reason: __DORIS_DELETE_SIGN__ is used as conjuncts.
     PREDICATES: `default_cluster:test`.`t2`.`__DORIS_DELETE_SIGN__` = 0
     partitions=1/1, tablets=1/1, tabletList=25372
     cardinality=0, avgRowSize=9.0, numNodes=1
SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID GROUP BY t2.userid;
userid	min(`t1`.`score`)
1	1
2	2
3	3
SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID GROUP BY t2.userid ORDER BY NULL;
userid	min(`t1`.`score`)
1	1
2	2
3	3
SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid;
userid	min(`t1`.`score`)
1	1
2	2
SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid;
userid	min(`t1`.`score` + 0.0)
1	1
2	2
SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid ORDER BY NULL;
userid	min(`t1`.`score` + 0.0)
1	1
2	2
EXPLAIN SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid ORDER BY NULL;
Explain String






     PREDICATES: `default_cluster:test`.`t2`.`__DORIS_DELETE_SIGN__` = 0
     PREDICATES: `t1`.`spID` = 2
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     TABLE: default_cluster:test.t2(t2), PREAGGREGATION: OFF. Reason: __DORIS_DELETE_SIGN__ is used as conjuncts.
     cardinality=0, avgRowSize=20.0, numNodes=1
     cardinality=0, avgRowSize=9.0, numNodes=1
     partitions=1/1, tablets=1/1, tabletList=25363
     partitions=1/1, tablets=1/1, tabletList=25372
     runtime filters: RF000[in_or_bloom] -> `t1`.`userID`
    <slot 4> `t2`.`userid`
    <slot 5> min(<slot 7> + 0.0)
    EXCHANGE ID: 04
    UNPARTITIONED
  0:VOlapScanNode
  1:VOlapScanNode
  2:VHASH JOIN
  3:VAGGREGATE (update finalize)
  OUTPUT EXPRS:
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t2`.`userID`
  STREAM DATA SINK
  VRESULT SINK
  |  
  |  
  |    
  |       offset: 0
  |  cardinality=-1
  |  cardinality=0
  |  equal join conjunct: `t1`.`userID` = `t2`.`userID`
  |  group by: <slot 10>
  |  hash output slot ids: 0 1 
  |  join op: INNER JOIN(BROADCAST)[Tables are not in the same group]
  |  output slot ids: 7 10 
  |  output: min(<slot 7> + 0.0)
  |  runtime filters: RF000[in_or_bloom] <- `t2`.`userID`
  |  vIntermediate tuple ids: 4 5 
  |  vec output tuple id: 3
  |----4:VEXCHANGE
PLAN FRAGMENT 0
PLAN FRAGMENT 1
drop table t1;
drop table t2;
create table t1 (foo int)
DISTRIBUTED BY HASH(foo) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
insert into t1 values (1);
select 1+1, "a",count(*) from t1 where foo in (2);
1 + 1	'a'	count(*)
2	a	0
insert into t1 values (1);
select 1+1,"a",count(*) from t1 where foo in (2);
1 + 1	'a'	count(*)
2	a	0
drop table t1;
CREATE TABLE t1 (
spID BIGINT,
userID BIGINT,
score smallint(5)
)
DISTRIBUTED BY HASH(spID) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES (1,1,1),(2,2,2),(2,1,1),(3,3,3),(4,3,3),(5,3,3),(6,3,3),(7,3,3);
ANALYZE TABLE t1;
explain select userid,count(*) from t1 group by userid order by userid desc;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    <slot 3>  `userid`
    <slot 4> <slot 2> count(*)
  PARTITION: UNPARTITIONED

  VRESULT SINK

  3:VMERGING-EXCHANGE
     offset: 0
     limit: 9223372036854775807

PLAN FRAGMENT 1

  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  STREAM DATA SINK
    EXCHANGE ID: 03
    UNPARTITIONED

  2:VTOP-N
  |  order by: <slot 3>  `userid` DESC
  |  offset: 0
  |  limit: 9223372036854775807
  |  
  1:VAGGREGATE (update finalize)
  |  output: count(*)
  |  group by: `userid`
  |  cardinality=-1
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     partitions=1/1, tablets=1/1, tabletList=25389
     cardinality=0, avgRowSize=8.0, numNodes=1
explain select userid,count(*) from t1 group by userid order by null;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
     `userid`
    <slot 2> count(*)
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  VRESULT SINK

  1:VAGGREGATE (update finalize)
  |  output: count(*)
  |  group by: `userid`
  |  cardinality=-1
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     partitions=1/1, tablets=1/1, tabletList=25389
     cardinality=0, avgRowSize=8.0, numNodes=1
select userid,count(*) from t1 group by userid order by userid desc;
userid	count(*)
3	5
2	1
1	2
select userid,count(*) from t1 group by userid having (count(*)+1) IN (4,3) order by userid desc;
userid	count(*)
1	2
select userid,count(*) from t1 group by userid having 3  IN (1,COUNT(*)) order by userid desc;
userid	count(*)
explain select spid,count(*) from t1 where spid between 1 and 2 group by spid order by spid desc;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
    <slot 3>  `spid`
    <slot 4> <slot 2> count(*)
  PARTITION: UNPARTITIONED

  VRESULT SINK

  3:VMERGING-EXCHANGE
     offset: 0
     limit: 9223372036854775807

PLAN FRAGMENT 1

  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  STREAM DATA SINK
    EXCHANGE ID: 03
    UNPARTITIONED

  2:VTOP-N
  |  order by: <slot 3>  `spid` DESC
  |  offset: 0
  |  limit: 9223372036854775807
  |  
  1:VAGGREGATE (update finalize)
  |  output: count(*)
  |  group by: `spid`
  |  cardinality=-1
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `spid` >= 1 AND `spid` <= 2
     partitions=1/1, tablets=1/1, tabletList=25389
     cardinality=0, avgRowSize=8.0, numNodes=1
explain select spid,count(*) from t1 where spid between 1 and 2 group by spid;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
     `spid`
    <slot 2> count(*)
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  VRESULT SINK

  1:VAGGREGATE (update finalize)
  |  output: count(*)
  |  group by: `spid`
  |  cardinality=-1
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `spid` >= 1 AND `spid` <= 2
     partitions=1/1, tablets=1/1, tabletList=25389
     cardinality=0, avgRowSize=8.0, numNodes=1
explain select spid,count(*) from t1 where spid between 1 and 2 group by spid order by null;
Explain String
PLAN FRAGMENT 0
  OUTPUT EXPRS:
     `spid`
    <slot 2> count(*)
  PARTITION: HASH_PARTITIONED: `default_cluster:test`.`t1`.`spID`

  VRESULT SINK

  1:VAGGREGATE (update finalize)
  |  output: count(*)
  |  group by: `spid`
  |  cardinality=-1
  |  
  0:VOlapScanNode
     TABLE: default_cluster:test.t1(t1), PREAGGREGATION: ON
     PREDICATES: `spid` >= 1 AND `spid` <= 2
     partitions=1/1, tablets=1/1, tabletList=25389
     cardinality=0, avgRowSize=8.0, numNodes=1
select spid,count(*) from t1 where spid between 1 and 2 group by spid;
spid	count(*)
1	1
2	2
select spid,count(*) from t1 where spid between 1 and 2 group by spid order by spid desc;
spid	count(*)
2	2
1	1
drop table t1;
create table t1 (a date default null, b date default null)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
insert into t1 values ('1999-10-01','2000-01-10'), ('1997-01-01','1998-10-01');
select a,min(b) c,count(distinct rand()) from t1 group by a having c<a + interval 1 day;
a	c	count(DISTINCT rand())
drop table t1;
CREATE TABLE t1 (
`a` char(193) default NULL,
`b` char(63) default NULL
)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
"replication_num" = "1"
);
INSERT INTO t1 VALUES ('abc','def'),('hij','klm');
SELECT CONCAT(a, b) FROM t1 GROUP BY 1;
concat(`a`, `b`)
abcdef
hijklm
SELECT CONCAT(a, b),count(*) FROM t1 GROUP BY 1;
concat(`a`, `b`)	count(*)
abcdef	1
hijklm	1
SELECT CONCAT(a, b),count(distinct a) FROM t1 GROUP BY 1;
concat(`a`, `b`)	count(DISTINCT `a`)
abcdef	1
hijklm	1
SELECT 1 FROM t1 GROUP BY CONCAT(a, b);
1
1
1
INSERT INTO t1 values ('hij','klm');
SELECT CONCAT(a, b),count(*) FROM t1 GROUP BY 1;
concat(`a`, `b`)	count(*)
abcdef	1
hijklm	2
DROP TABLE t1;
