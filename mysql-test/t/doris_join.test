#
# Initialization
--disable_warnings
drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
drop table if exists t4;
drop table if exists t5;
drop table if exists t6;
--enable_warnings

#
# Test different join syntaxes
#

CREATE TABLE t1 (S1 INT)
DISTRIBUTED BY HASH(S1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (S1 INT)
DISTRIBUTED BY HASH(S1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (2);
SELECT * FROM t1 JOIN t2;
SELECT * FROM t1 INNER JOIN t2;
SELECT * from t1 JOIN t2 USING (S1);
SELECT * FROM t1 INNER JOIN t2 USING (S1);
SELECT * from t1 CROSS JOIN t2;
SELECT * from t1 LEFT JOIN t2 USING(S1);
SELECT * from t1 LEFT JOIN t2 ON(t2.S1=2);
SELECT * from t1 RIGHT JOIN t2 USING(S1);
SELECT * from t1 RIGHT JOIN t2 ON(t1.S1=1);
drop table t1;
drop table t2;

#
# This failed for lia Perminov
#

create table t1 (id int)
UNIQUE KEY(id)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
create table t2 (id int)
DISTRIBUTED BY HASH(id) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
insert into t1 values (75);
insert into t1 values (79);
insert into t1 values (78);
insert into t1 values (77);
insert into t1 values (76);
insert into t1 values (76);
insert into t1 values (104);
insert into t1 values (103);
insert into t1 values (102);
insert into t1 values (101);
insert into t1 values (105);
insert into t1 values (106);
insert into t1 values (107);

insert into t2 values (107),(75),(1000);

--sorted_result
select t1.id, t2.id from t1, t2 where t2.id = t1.id;
--sorted_result
select t1.id, count(t2.id) from t1,t2 where t2.id = t1.id group by t1.id;
# We see the functional dependency implied by WHERE!

#
# Test problems with impossible ON or WHERE
#
--sorted_result
select t1.id,t2.id from t2 left join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
explain select t1.id,t2.id from t2 left join t1 on t1.id>=74 and t1.id<=0 where t2.id=75 and t1.id is null;
explain select t1.id, t2.id from t1, t2 where t2.id = t1.id and t1.id <0 and t1.id > 0;
drop table t1;
drop table t2;

#
# TEST LEFT JOIN with DATE columns
#

CREATE TABLE t1 (d DATE NOT NULL)
DISTRIBUTED BY HASH(d) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (d DATE NOT NULL)
DISTRIBUTED BY HASH(d) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 (d) VALUES ('2001-08-01'),('1000-01-01');
SELECT * FROM t1 LEFT JOIN t2 USING (d) WHERE t2.d IS NULL;
SELECT * from t1 WHERE t1.d IS NULL;
SELECT * FROM t1 WHERE 1/0 IS NULL;
DROP TABLE t1;
DROP TABLE t2;

#
# Problem with reference from const tables
#
CREATE TABLE t1 (
  Document_ID varchar(50) NOT NULL default '',
  Contractor_ID varchar(6) NOT NULL default '',
  Language_ID char(3) NOT NULL default '',
  Expiration_Date datetime default NULL,
  Publishing_Date datetime default NULL,
  Title text,
  Column_ID varchar(50) NOT NULL default ''
)
UNIQUE KEY(Document_ID,Contractor_ID,Language_ID)
DISTRIBUTED BY HASH(Document_ID) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

INSERT INTO t1 VALUES ('xep80','1','ger','2001-12-31 20:00:00','2001-11-12 10:58:00','Kartenbestellung - jetzt auch online','anle'),('','999998','',NULL,NULL,NULL,'');

CREATE TABLE t2 (
  Contractor_ID char(6) NOT NULL default '',
  Language_ID char(3) NOT NULL default '',
  Document_ID char(50) NOT NULL default '',
  CanRead char(1) default NULL,
  Customer_ID int(11) NOT NULL default '0'
)
UNIQUE KEY(Contractor_ID,Language_ID,Document_ID)
DISTRIBUTED BY HASH(Contractor_ID) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

INSERT INTO t2 VALUES ('5','ger','xep80','1',999999),('1','ger','xep80','1',999999);
CREATE TABLE t3 (
  Language_ID char(3) NOT NULL default '',
  Column_ID char(50) NOT NULL default '',
  Contractor_ID char(6) NOT NULL default '',
  CanRead char(1) default NULL,
  Active char(1) default NULL
)
UNIQUE KEY(Language_ID,Column_ID,Contractor_ID)
DISTRIBUTED BY HASH(Language_ID) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t3 VALUES ('ger','home','1','1','1'),('ger','Test','1','0','0'),('ger','derclu','1','0','0'),('ger','clubne','1','0','0'),('ger','philos','1','0','0'),('ger','clubko','1','0','0'),('ger','clubim','1','1','1'),('ger','progra','1','0','0'),('ger','progvo','1','0','0'),('ger','progsp','1','0','0'),('ger','progau','1','0','0'),('ger','progku','1','0','0'),('ger','progss','1','0','0'),('ger','nachl','1','0','0'),('ger','mitgli','1','0','0'),('ger','mitsu','1','0','0'),('ger','mitbus','1','0','0'),('ger','ergmar','1','1','1'),('ger','home','4','1','1'),('ger','derclu','4','1','1'),('ger','clubne','4','0','0'),('ger','philos','4','1','1'),('ger','clubko','4','1','1'),('ger','clubim','4','1','1'),('ger','progra','4','1','1'),('ger','progvo','4','1','1'),('ger','progsp','4','1','1'),('ger','progau','4','0','0'),('ger','progku','4','1','1'),('ger','progss','4','1','1'),('ger','nachl','4','1','1'),('ger','mitgli','4','0','0'),('ger','mitsu','4','0','0'),('ger','mitbus','4','0','0'),('ger','ergmar','4','1','1'),('ger','progra2','1','0','0'),('ger','archiv','4','1','1'),('ger','anmeld','4','1','1'),('ger','thema','4','1','1'),('ger','edito','4','1','1'),('ger','madis','4','1','1'),('ger','enma','4','1','1'),('ger','madis','1','1','1'),('ger','enma','1','1','1'),('ger','vorsch','4','0','0'),('ger','veranst','4','0','0'),('ger','anle','4','1','1'),('ger','redak','4','1','1'),('ger','nele','4','1','1'),('ger','aukt','4','1','1'),('ger','callcenter','4','1','1'),('ger','anle','1','0','0');
delete from t1 where Contractor_ID='999998';
insert into t1 (Contractor_ID) Values ('999998');
SELECT DISTINCT COUNT(t1.Title) FROM t1,
t2, t3 WHERE 
t1.Document_ID='xep80' AND t1.Contractor_ID='1' AND 
t1.Language_ID='ger' AND '2001-12-21 23:14:24' >= 
Publishing_Date AND '2001-12-21 23:14:24' <= Expiration_Date AND 
t1.Document_ID = t2.Document_ID AND 
t1.Language_ID = t2.Language_ID AND 
t1.Contractor_ID = t2.Contractor_ID AND ( 
t2.Customer_ID = '4'  OR 
t2.Customer_ID = '999999'  OR 
t2.Customer_ID = '1' )AND t2.CanRead 
= '1'  AND t1.Column_ID=t3.Column_ID AND 
t1.Language_ID=t3.Language_ID AND ( 
t3.Contractor_ID = '4'  OR 
t3.Contractor_ID = '999999'  OR 
t3.Contractor_ID = '1') AND 
t3.CanRead='1' AND t3.Active='1';
SELECT DISTINCT COUNT(t1.Title) FROM t1,
t2, t3 WHERE 
t1.Document_ID='xep80' AND t1.Contractor_ID='1' AND 
t1.Language_ID='ger' AND '2001-12-21 23:14:24' >= 
Publishing_Date AND '2001-12-21 23:14:24' <= Expiration_Date AND 
t1.Document_ID = t2.Document_ID AND 
t1.Language_ID = t2.Language_ID AND 
t1.Contractor_ID = t2.Contractor_ID AND ( 
t2.Customer_ID = '4'  OR 
t2.Customer_ID = '999999'  OR 
t2.Customer_ID = '1' )AND t2.CanRead 
= '1'  AND t1.Column_ID=t3.Column_ID AND 
t1.Language_ID=t3.Language_ID AND ( 
t3.Contractor_ID = '4'  OR 
t3.Contractor_ID = '999999'  OR 
t3.Contractor_ID = '1') AND 
t3.CanRead='1' AND t3.Active='1';
drop table t1;
drop table t2;
drop table t3;

#
# BUG#15229 - columns of nested joins that are not natural joins incorrectly
# materialized
#
create table t1 (a1 int, a2 int)
DISTRIBUTED BY HASH(a1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
create table t2 (a1 int, b int)
DISTRIBUTED BY HASH(a1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
create table t3 (c1 int, c2 int)
DISTRIBUTED BY HASH(c1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
create table t4 (c2 int)
DISTRIBUTED BY HASH(c2) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);

insert into t1 values (1,1);
insert into t2 values (1,1);
insert into t3 values (1,1);
insert into t4 values (1);

select * from t1 join t2 using (a1) join t3 on b=c1 join t4 using (c2);
select a2 from t1 join t2 using (a1) join t3 on b=c1 join t4 using (c2);

drop table t1;
drop table t2;
drop table t3;
drop table t4;
