--echo #
--echo # Start out by testing some simple in-memory inner hash joins.
--echo #
# Test case is unstable in valgrind

--echo # Join on two integer columns.
CREATE TABLE t1 (col1 INTEGER)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (col1 INTEGER)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES (1), (3), (5), (7);
INSERT INTO t2 VALUES (1), (2), (5), (6);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
DROP TABLE t1;
DROP TABLE t2;

--echo # Join on a integer column and a string column.
CREATE TABLE t1 (col1 INTEGER)
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (col1 VARCHAR(255))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES (1), (3), (5), (7);
INSERT INTO t2 VALUES (1), (2), (5), (6);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
DROP TABLE t1;
DROP TABLE t2;

--echo # Join on two datetime columns.
CREATE TABLE t1 (col1 DATETIME(6))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (col1 DATETIME(6))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES ('2018-01-01 00:00:00.000000'),
                      ('2018-01-01 00:00:00.000001'),
                      ('2018-01-02 00:00:00.000000'),
                      ('2018-01-02 00:00:00.000001'),
                      (NULL), (NULL);
INSERT INTO t2 VALUES ('2018-01-01 00:00:00.000000'),
                      ('2018-01-01 00:00:00.000002'),
                      ('2018-01-02 00:00:00.000001'),
                      ('2019-01-02 00:00:00.000001'),
                      (NULL), (NULL), (NULL);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
# Filter out cost and row estimates, as they are different with hypergraph.
# Also normalize the order of the predicates, which is different in hypergraph.
--replace_regex / *\(cost=.*// /t2\.col1 = t1\.col1/t1.col1 = t2.col1/
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1;
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
# Filter out cost and row estimates, as they are different with hypergraph.
--replace_regex / *\(cost=.*//
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1;
--sorted_result
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1 ORDER BY t1.col1;
DROP TABLE t1;
DROP TABLE t2;

--echo # Join on a string and datetime column, where datetime comparison is
--echo # picked.
CREATE TABLE t1 (a DATETIME)
DISTRIBUTED BY HASH(a) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES ('2001-01-01 00:00:00'), (NULL);

CREATE TABLE t2 (b VARCHAR(64))
DISTRIBUTED BY HASH(b) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t2 VALUES ('2001#01#01'), (NULL), (NULL);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
# Filter out cost and row estimates, as they are different with hypergraph.
--replace_regex / *\(cost=.*//
EXPLAIN SELECT * FROM t1, t2 WHERE a=b;
SELECT * FROM t1, t2 WHERE a=b;
# Filter out cost and row estimates, as they are different with hypergraph.
--replace_regex / *\(cost=.*//
EXPLAIN SELECT * FROM t1, t2 WHERE a<=>b;
--sorted_result
SELECT * FROM t1, t2 WHERE a<=>b;
DROP TABLE t1;
DROP TABLE t2;

--echo # Join on two double columns.
CREATE TABLE t1 (col1 DECIMAL(6, 2))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (col1 DECIMAL(6, 2))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES (0), (1.1), (3.3), (5.5), (7.7), (NULL);
INSERT INTO t2 VALUES (0), (1.1), (1.11), (5.5), (6.6), (NULL);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1;
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1;
--sorted_result
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1;
DROP TABLE t1;
DROP TABLE t2;

--echo # Join on two decimal columns.
CREATE TABLE t1 (col1 DECIMAL(6, 2))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
CREATE TABLE t2 (col1 DECIMAL(6, 2))
DISTRIBUTED BY HASH(col1) BUCKETS 1
PROPERTIES (
    "replication_num" = "1"
);
INSERT INTO t1 VALUES (0), (1.1), (3.3), (5.5), (7.7), (NULL);
INSERT INTO t2 VALUES (0), (1.1), (1.10), (5.5), (6.6), (NULL);
ANALYZE TABLE t1;
ANALYZE TABLE t2;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1;
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 = t2.col1 ORDER BY t1.col1;
--skip_if_hypergraph  # Depends on the query plan.
EXPLAIN
  SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1;
--sorted_result
SELECT t1.col1, t2.col1 FROM t1 JOIN t2 ON t1.col1 <=> t2.col1;
DROP TABLE t1;
DROP TABLE t2;
