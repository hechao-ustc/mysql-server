--echo # 
--echo # Test that on a tiny table, the computed filtering effect is not
--echo # less than one row for the basic condition filter constants
--echo #

CREATE TABLE t1(
  col1_pk INTEGER,
  col2 INTEGER
)UNIQUE KEY(`col1_pk`)
    DISTRIBUTED BY HASH(col1_pk) BUCKETS 1
    PROPERTIES (
    "replication_num" = "1"
    );

INSERT INTO t1 VALUES (0,0),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7);

--disable_query_log
--disable_result_log
ANALYZE TABLE t1;
--enable_result_log
--enable_query_log

--echo # Filtered column should be 1 / (size of table) and larger than 
--echo # COND_FILTER_EQUALITY
EXPLAIN SELECT * FROM t1 WHERE col2 = 2;

--echo # Filtered column should be (size of table - 1) / (size of table) 
--echo # and less than COND_FILTER_EQUALITY
EXPLAIN SELECT * FROM t1 WHERE col2 <> 2;

--echo # Filtered column should be 1 / (size of table) and larger than
--echo # COND_FILTER_BETWEEN
EXPLAIN SELECT * FROM t1 WHERE col2 BETWEEN 2 AND 4;

--echo # Filtered column should be (size of table - 1) / (size of table)
--echo # and less than COND_FILTER_BETWEEN
EXPLAIN SELECT * FROM t1 WHERE col2 NOT BETWEEN 2 AND 4;

# Make the table even smaller to be able to test COND_FILTER_INEQUALITY
TRUNCATE TABLE t1;
INSERT INTO t1 VALUES (0,0),(1,1);

--disable_query_log
--disable_result_log
ANALYZE TABLE t1;
--enable_result_log
--enable_query_log

--echo # Filtered column should be 1 / (size of table) and larger than
--echo # COND_FILTER_INEQUALITY
EXPLAIN SELECT * FROM t1 WHERE col2 > 1;

DROP TABLE t1;
